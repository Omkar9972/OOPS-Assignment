1.Implement a linked list using JavaScript. 

Link for hint : https://www.c-sharpcorner.com/article/linkedlist-implementation-in-javascript/ 

 

Create an HTML5 page and allow the user to input a nodeâ€™s value. Create buttons to add a node, delete a node & print the linked list.
//HTML code

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Document</title>
    
</head>

<body>
    <div>
        <input type="text" id="demo" value="">

        <button onclick="insertElement()">Insert Element</button>
        <button onclick="printElement()">Show Elements</button><br><br>

        <input type="text" id="demo2" value="">
        <button onclick="delElement()">Delete Element By Index</button>
    </div>
    <script>
        class Node {
            constructor(data, next = null) {
                this.data = data;
                this.next = next;
            }
        }

        // Create/Get/Remove Nodes From Linked List
        class LinkedList {
            constructor() {
                this.head = null;
                this.size = 0;
            }

            // Insert first node
            insertFirst(data) {
                this.head = new Node(data, this.head);
                this.size++;
            }

            // Insert last node
            insertLast(data) {
                let node = new Node(data);
                let current;

                // If empty, make head
                if (!this.head) {
                    this.head = node;
                } else {
                    current = this.head;

                    while (current.next) {
                        current = current.next;
                    }

                    current.next = node;
                }

                this.size++;
            }

            // Insert at index
            insertAt(data, index) {
                //  If index is out of range
                if (index > 0 || index > this.size) {
                    return;
                }

                // If first index
                if (index === 0) {
                    this.insertFirst(data);
                    return;
                }

                const node = new Node(data);
                let current, previous;

                // Set current to first
                current = this.head;
                let count = 0;

                while (count < index) {
                    previous = current; // Node before index
                    count++;
                    current = current.next; // Node after index
                }

                node.next = current;
                previous.next = node;

                this.size++;
            }

            // Get at index
            getAt(index) {
                let current = this.head;
                let count = 0;

                while (current) {
                    if (count == index) {
                        console.log(current.data);
                    }
                    count++;
                    current = current.next;
                }

                return null;
            }

            // Remove at index
            removeAt(index) {
                if (index > 0 && index > this.size) {
                    return;
                }

                let current = this.head;
                let previous;
                let count = 0;

                // Remove first
                if (index === 0) {
                    this.head = current.next;
                } else {
                    while (count < index) {
                        count++;
                        previous = current;
                        current = current.next;
                    }

                    previous.next = current.next;
                }

                this.size--;
            }

            // Clear list
            clearList() {
                this.head = null;
                this.size = 0;
            }

            // Print list data
            printListData() {
                let current = this.head;

                while (current) {
                    console.log(current.data);
                    current = current.next;
                }
            }
        }

        const ll = new LinkedList();

        function insertElement() {
            let num = document.getElementById('demo').value;
            ll.insertLast(num);
            console.log(`${num} inserted successfully`);
        }

        function printElement() {
            ll.printListData();
        }

        function delElement() {
            ll.removeAt(document.getElementById('demo2').value);
            printElement();
        }

    </script>
</body>

</html>
-------------------------------------------------------------------------------------------------------------------------------------------------
2. Implement a Stack using JavaScript. 

Link for hint: https://www.freecodecamp.org/news/stack-5404d9735f88/ 


Create an HTML5 page and allow the user to input a value to be added to the stack. Create buttons to implement push, pop operations & to prin the stack. The stack must be printed in a table format consisting of only one column. As the user performs push and pop operations, the table must reflect the same.  
//HTML code

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
</head>
<body>
    <button type="submit" id="push">Push</button>
    <button type="submit" id="pop">Pop</button>
    <button type="submit" id="print">Print</button>
    <br>
    <br>
    <div id="tablediv">
        <table border="5">
            <thead>
                <tr>
                    <th>Stack</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
<script>
    class Stack {
    constructor() {
        this.items = [];
        let top = -1;
    }

    push(element)
    {
        this.items.push(element);
    }

    pop()
    {
        if(this.items.length == 0)
        {
            return "Stack Underflow";
        }
        return this.items.pop();
    }

    print() 
    {
        var str = "";
        for(let i = 0; i < this.items.length; i++)
        {
            str += this.items[i] + " ";
        }
        console.log(str);
    }
}

let stacker = new Stack();

$("#push").on('click', function() {
    stacker.push(prompt("Enter a value to the Stack"));
    newTableData = `<tr> <td> ${stacker.items} </td> </tr>`;
    tableRow = $("table tbody");
    tableRow.append(newTableData);
})

$("#pop").on('click', function() {
    stacker.pop();
    remTableData = `<tr> <td> ${stacker.items} </td> </tr>`;
    tableRow = $("table tbody");
    tableRow.append(remTableData);
})

$("#print").on('click', function() {
    stacker.print();
})


</script>
</body>
</html>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Implement a Queue using JavaScript. 

Link for hint: https://betterprogramming.pub/implementing-a-queue-in-javascript-59b332c7ff0d 

Implement this similar to the stack implementation in the previous assignment. 
//HTML Code

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
</head>
<body>
    <button type="submit" id="add">Add</button>
    <button type="submit" id="del">Remove</button>
    <button type="submit" id="prnt">Print</button>
    <br>
    <br>
    <div id="tablediv">
        <table border="5">
            <thead>
                <tr>
                    <th>Queue</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <script >
        class Queue {
    constructor()
    {
        this.data = [];
        this.rear = 0;
        this.size = 10;
    }

    insert(element) {
        if(this.rear < this.size)
        {
            this.data[this.rear] = element;
            this.rear = this.rear + 1;        
        }
    }

    isEmpty() {
        return this.rear === 0;
    }

    delete()
    {
        if(this.isEmpty() === false)
        {
            this.rear = this.rear - 1;
            return this.data.shift();
        }
    }

    print()
    {
        for(let i = 0; i < this.rear; i++)
        {
            console.log(this.data[i]);
        }
    }
}

let q = new Queue();

$("#add").on('click', function() {
    q.insert(prompt("Enter a value to the Queue"));
    newTableData = `<tr> <td> ${q.data} </td> </tr>`;
    tableRow = $("table tbody");
    tableRow.append(newTableData);
})

$("#del").on('click', function() {
    q.delete();
    remTableData = `<tr> <td> ${q.data} </td> </tr>`;
    tableRow = $("table tbody");
    tableRow.append(remTableData);
})

$("#prnt").on('click', function() {
    q.print();
})
    </script>
</body>
</html>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
